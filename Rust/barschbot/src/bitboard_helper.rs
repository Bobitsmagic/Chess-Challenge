use crate::board;

pub fn set_bit(bit_board: &mut u64, index: u8, value: bool) {
    debug_assert!(index < 64);

    if value {
        *bit_board |= (1u64 << index);
    }
    else { 
        *bit_board &= !(1u64 << index);
    }
}

pub fn get_bit(bit_board: u64, index: u8) -> bool {
    return (bit_board & (1 << index)) != 0
}

pub fn toggle_bit(bit_board: &mut u64, index: u8){
    *bit_board ^= 1u64 << index;
}

pub const WHITE_PASSED_PAWN_MASK: [u64; 64] = [144680345676153344, 361700864190383360, 723401728380766720, 1446803456761533440, 2893606913523066880, 5787213827046133760, 11574427654092267520, 4629771061636907008, 144680345676152832, 361700864190382080, 723401728380764160, 1446803456761528320, 2893606913523056640, 5787213827046113280, 11574427654092226560, 4629771061636890624, 144680345676021760, 361700864190054400, 723401728380108800, 1446803456760217600, 2893606913520435200, 5787213827040870400, 11574427654081740800, 4629771061632696320, 144680345642467328, 361700864106168320, 723401728212336640, 1446803456424673280, 2893606912849346560, 5787213825698693120, 11574427651397386240, 4629771060558954496, 144680337052532736, 361700842631331840, 723401685262663680, 1446803370525327360, 2893606741050654720, 5787213482101309440, 11574426964202618880, 4629770785681047552, 144678138029277184, 361695345073192960, 723390690146385920, 1446781380292771840, 2893562760585543680, 5787125521171087360, 11574251042342174720, 4629700416936869888, 144115188075855872, 360287970189639680, 720575940379279360, 1441151880758558720, 2882303761517117440, 5764607523034234880, 11529215046068469760, 4611686018427387904, 0, 0, 0, 0, 0, 0, 0, 0];
pub const BLACK_PASSED_PAWN_MASK: [u64; 64] = [0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 10, 20, 40, 80, 160, 64, 514, 1285, 2570, 5140, 10280, 20560, 41120, 16448, 131586, 328965, 657930, 1315860, 2631720, 5263440, 10526880, 4210752, 33686018, 84215045, 168430090, 336860180, 673720360, 1347440720, 2694881440, 1077952576, 8623620610, 21559051525, 43118103050, 86236206100, 172472412200, 344944824400, 689889648800, 275955859520, 2207646876162, 5519117190405, 11038234380810, 22076468761620, 44152937523240, 88305875046480, 176611750092960, 70644700037184, 565157600297474, 1412894000743685, 2825788001487370, 5651576002974740, 11303152005949480, 22606304011898960, 45212608023797920, 18085043209519168];


//Pawns that attack 2 center squares (e and d pawns)
pub const DOUBLE_PAWN_CENTER_ATTACK_WHITE: u64 = 404226048;
pub const DOUBLE_PAWN_CENTER_ATTACK_BLACK: u64 = 26491358281728;

//Pawns that attack 1 center square (c and f pawns)
pub const PAWN_CENTER_ATTACK_WHITE: u64 = 606339072;
pub const PAWN_CENTER_ATTACK_BLACK: u64 = 39737037422592;

pub const RANK_MASKS: [u64; 8] = [
    0xff, 
    0xff00, 
    0xff0000, 
    0xff000000, 
    0xff00000000, 
    0xff0000000000,
    0xff000000000000,
    0xff00000000000000];

pub fn print_bitboard(value: u64) {
    for y in (0..8).rev() {
        print!("{} ", y + 1);
        for x in 0..8 {
            print!("{}", 1 & (value >> (x + y * 8)));
        }

        println!();
    }

    println!("  abcdefgh");
}